// Please don't edit this file!
package gentest

import (
	"context"
	"errors"
	"reflect"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// UserUpdater.UpsertOnID
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"ID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnID"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnIdOnUsername
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnIdOnUsername"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnIdOnUsername")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"ID",
						"Username",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnIdOnUsername error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnIdOnUsername",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnIdOnUsername"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUsername
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnUsername"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnUsername")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"Username",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUsername error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUsername",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUsername"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnBD
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnBD"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnBD")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"BirthDay",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnBD error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnBD",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnBD"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUser
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUser"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnKeyOnUserID
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnKeyOnUserID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnKeyOnUserID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnKeyOnUserID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnKeyOnUserID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnKeyOnUserID"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnKeyOnUser
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnKeyOnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnKeyOnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnKeyOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnKeyOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnKeyOnUser"] = stmt
			}
		}
		{ //// UserUpdater.UpsertOnUID
			stmt, exists := ctx.Statements["UserUpdater.UpsertOnUID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.UpsertOnUID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.UpsertOnUID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.UpsertOnUID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.UpsertOnUID"] = stmt
			}
		}
		{ //// UserUpdater.Upsert2OnUser
			stmt, exists := ctx.Statements["UserUpdater.Upsert2OnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert2OnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile2{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile2)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert2OnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert2OnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert2OnUser"] = stmt
			}
		}
		{ //// UserUpdater.Upsert2OnKeyOnUserID
			stmt, exists := ctx.Statements["UserUpdater.Upsert2OnKeyOnUserID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert2OnKeyOnUserID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile2{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile2)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert2OnKeyOnUserID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert2OnKeyOnUserID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert2OnKeyOnUserID"] = stmt
			}
		}
		{ //// UserUpdater.Upsert2OnKeyOnUser
			stmt, exists := ctx.Statements["UserUpdater.Upsert2OnKeyOnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert2OnKeyOnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile2{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile2)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert2OnKeyOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert2OnKeyOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert2OnKeyOnUser"] = stmt
			}
		}
		{ //// UserUpdater.Upsert2OnUID
			stmt, exists := ctx.Statements["UserUpdater.Upsert2OnUID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert2OnUID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile2{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile2)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert2OnUID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert2OnUID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert2OnUID"] = stmt
			}
		}
		{ //// UserUpdater.Upsert3OnUser
			stmt, exists := ctx.Statements["UserUpdater.Upsert3OnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert3OnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile3{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile3)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert3OnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert3OnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert3OnUser"] = stmt
			}
		}
		{ //// UserUpdater.Upsert3OnKeyOnUserID
			stmt, exists := ctx.Statements["UserUpdater.Upsert3OnKeyOnUserID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert3OnKeyOnUserID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile3{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile3)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert3OnKeyOnUserID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert3OnKeyOnUserID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert3OnKeyOnUserID"] = stmt
			}
		}
		{ //// UserUpdater.Upsert3OnKeyOnUser
			stmt, exists := ctx.Statements["UserUpdater.Upsert3OnKeyOnUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert3OnKeyOnUser")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile3{}),
					[]string{
						"Key",
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile3)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert3OnKeyOnUser error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert3OnKeyOnUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert3OnKeyOnUser"] = stmt
			}
		}
		{ //// UserUpdater.Upsert3OnUID
			stmt, exists := ctx.Statements["UserUpdater.Upsert3OnUID"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserUpdater.Upsert3OnUID")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&UserProfile3{}),
					[]string{
						"UserID",
					},
					[]string{
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf((*UserProfile3)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserUpdater.Upsert3OnUID error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserUpdater.Upsert3OnUID",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserUpdater.Upsert3OnUID"] = stmt
			}
		}
		return nil
	})
}

func NewUserUpdater(ref gobatis.SqlSession) UserUpdater {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &UserUpdaterImpl{session: ref}
}

type UserUpdaterImpl struct {
	session gobatis.SqlSession
}

func (impl *UserUpdaterImpl) WithDB(db gobatis.DBRunner) UserUpdater {
	return &UserUpdaterImpl{session: impl.session.WithDB(db)}
}

func (impl *UserUpdaterImpl) UpsertOnID(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnIdOnUsername(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnIdOnUsername",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUsername(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUsername",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnBD(user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnBD",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUser(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnKeyOnUserID(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnKeyOnUserID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnKeyOnUser(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnKeyOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) UpsertOnUID(user *UserProfile) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.UpsertOnUID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert2OnUser(user *UserProfile2) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert2OnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert2OnKeyOnUserID(user *UserProfile2) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert2OnKeyOnUserID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert2OnKeyOnUser(user *UserProfile2) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert2OnKeyOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert2OnUID(user *UserProfile2) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert2OnUID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert3OnUser(user *UserProfile3) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert3OnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert3OnKeyOnUserID(user *UserProfile3) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert3OnKeyOnUserID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert3OnKeyOnUser(user *UserProfile3) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert3OnKeyOnUser",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}

func (impl *UserUpdaterImpl) Upsert3OnUID(user *UserProfile3) (int64, error) {
	return impl.session.Insert(context.Background(), "UserUpdater.Upsert3OnUID",
		[]string{
			"user",
		},
		[]interface{}{
			user,
		})
}
