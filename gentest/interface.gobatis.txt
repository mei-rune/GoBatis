// Please don't edit this file!
package gentest

import (
	"context"
	"database/sql"
	"errors"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// TestInterface.Insert
			stmt, exists := ctx.Statements["TestInterface.Insert"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.Insert")
				}
			} else {
				sqlStr := "insert into xxx (name)  values (#{name})"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.Insert",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.Insert"] = stmt
			}
		}
		{ //// TestInterface.Update
			stmt, exists := ctx.Statements["TestInterface.Update"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.Update")
				}
			} else {
				sqlStr := "insert into xxx (name)  values (#{name})"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.Update",
					gobatis.StatementTypeUpdate,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.Update"] = stmt
			}
		}
		{ //// TestInterface.Query
			stmt, exists := ctx.Statements["TestInterface.Query"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.Query")
				}
			} else {
				sqlStr := "select * from xxx where name = #{name}"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.Query",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.Query"] = stmt
			}
		}
		{ //// TestInterface.Delete
			stmt, exists := ctx.Statements["TestInterface.Delete"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.Delete")
				}
			} else {
				sqlStr := "delete from xxx where name = #{name}"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.Delete",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.Delete"] = stmt
			}
		}
		{ //// TestInterface.GetByCallback1
			stmt, exists := ctx.Statements["TestInterface.GetByCallback1"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.GetByCallback1")
				}
			} else {
				sqlStr := "select * from xxx where name = #{name}"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.GetByCallback1",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.GetByCallback1"] = stmt
			}
		}
		{ //// TestInterface.GetByCallback2
			stmt, exists := ctx.Statements["TestInterface.GetByCallback2"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestInterface.GetByCallback2")
				}
			} else {
				sqlStr := "select * from xxx where name = #{name}"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestInterface.GetByCallback2",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestInterface.GetByCallback2"] = stmt
			}
		}
		return nil
	})
}

func NewTestInterface(ref gobatis.SqlSession) TestInterface {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &TestInterfaceImpl{session: ref}
}

type TestInterfaceImpl struct {
	session gobatis.SqlSession
}

func (impl *TestInterfaceImpl) Insert(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "TestInterface.Insert",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func (impl *TestInterfaceImpl) Update(id int64, name string) (int64, error) {
	return impl.session.Update(context.Background(), "TestInterface.Update",
		[]string{
			"id",
			"name",
		},
		[]interface{}{
			id,
			name,
		})
}

func (impl *TestInterfaceImpl) Query(name string) (int64, error) {
	var instance int64
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "TestInterface.Query",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		}).Scan(&nullable)
	if err != nil {
		return 0, err
	}
	if !nullable.Valid {
		return 0, sql.ErrNoRows
	}

	return instance, nil
}

func (impl *TestInterfaceImpl) Delete(name string) (int64, error) {
	return impl.session.Delete(context.Background(), "TestInterface.Delete",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func (impl *TestInterfaceImpl) GetByCallback1(name string) func(a *int64) error {
	result := impl.session.SelectOne(context.Background(), "TestInterface.GetByCallback1",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
	return func(a *int64) error {
		return result.Scan(a)
	}
}

func (impl *TestInterfaceImpl) GetByCallback2(name string) func(*int64) error {
	result := impl.session.SelectOne(context.Background(), "TestInterface.GetByCallback2",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
	return func(value *int64) error {
		return result.Scan(value)
	}
}
