// Please don't edit this file!
package gentest

import (
	"context"
	"database/sql"
	"errors"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// RoleDao.Insert
			stmt, exists := ctx.Statements["RoleDao.Insert"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("RoleDao.Insert")
				}
			} else {
				sqlStr := "insert into auth_roles(name, created_at, updated_at)\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
				switch ctx.Dialect {
				case gobatis.NewDialect("mssql"):
					sqlStr = "insert into auth_roles(name, created_at, updated_at)\r\n output inserted.id\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
				case gobatis.NewDialect("postgres"):
					sqlStr = "insert into auth_roles(name, created_at, updated_at)\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) returning id"
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "RoleDao.Insert",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["RoleDao.Insert"] = stmt
			}
		}
		{ //// RoleDao.Get
			stmt, exists := ctx.Statements["RoleDao.Get"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("RoleDao.Get")
				}
			} else {
				sqlStr := "select name FROM auth_roles WHERE id=?"
				switch ctx.Dialect {
				case gobatis.NewDialect("postgres"):
					sqlStr = "select name FROM auth_roles WHERE id=$1"
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "RoleDao.Get",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["RoleDao.Get"] = stmt
			}
		}
		{ //// RoleDao.Users
			stmt, exists := ctx.Statements["RoleDao.Users"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("RoleDao.Users")
				}
			} else {
				sqlStr := "select * from auth_users where exists(\r\n            select * from auth_users_and_roles\r\n            where auth_users_and_roles.role_id = #{id} and auth_users.id = auth_users_and_roles.user_id)"
				stmt, err := gobatis.NewMapppedStatement(ctx, "RoleDao.Users",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["RoleDao.Users"] = stmt
			}
		}
		{ //// RoleDao.AddUser
			stmt, exists := ctx.Statements["RoleDao.AddUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("RoleDao.AddUser")
				}
			} else {
				sqlStr := "insert into auth_users_and_roles(user_id, role_id)\r\n values ((select id from auth_users where username=#{username}), (select id from auth_roles where name=#{rolename}))"
				stmt, err := gobatis.NewMapppedStatement(ctx, "RoleDao.AddUser",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["RoleDao.AddUser"] = stmt
			}
		}
		{ //// RoleDao.RemoveUser
			stmt, exists := ctx.Statements["RoleDao.RemoveUser"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("RoleDao.RemoveUser")
				}
			} else {
				sqlStr := "delete from auth_users_and_roles where exists(\r\n              select * from auth_users_and_roles, auth_users, auth_roles\r\n              where auth_users.id = auth_users_and_roles.user_id\r\n              and auth_roles.id = auth_users_and_roles.role_id\r\n              and auth_roles.name = #{rolename}\r\n              and auth_users.username = #{username}\r\n          )"
				stmt, err := gobatis.NewMapppedStatement(ctx, "RoleDao.RemoveUser",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["RoleDao.RemoveUser"] = stmt
			}
		}
		return nil
	})
}

func NewRoleDao(ref gobatis.SqlSession) RoleDao {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &RoleDaoImpl{session: ref}
}

type RoleDaoImpl struct {
	session gobatis.SqlSession
}

func (impl *RoleDaoImpl) Insert(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "RoleDao.Insert",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func (impl *RoleDaoImpl) Get(id int64) (string, error) {
	var instance string
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "RoleDao.Get",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		}).Scan(&nullable)
	if err != nil {
		return "", err
	}
	if !nullable.Valid {
		return "", sql.ErrNoRows
	}

	return instance, nil
}

func (impl *RoleDaoImpl) Users(id int64) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "RoleDao.Users",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *RoleDaoImpl) AddUser(username string, rolename string) error {
	_, err := impl.session.Insert(context.Background(), "RoleDao.AddUser",
		[]string{
			"username",
			"rolename",
		},
		[]interface{}{
			username,
			rolename,
		},
		true)
	return err
}

func (impl *RoleDaoImpl) RemoveUser(username string, rolename string) (e error) {
	_, e = impl.session.Delete(context.Background(), "RoleDao.RemoveUser",
		[]string{
			"username",
			"rolename",
		},
		[]interface{}{
			username,
			rolename,
		})
	return e
}
