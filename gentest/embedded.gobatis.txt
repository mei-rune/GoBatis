// Please don't edit this file!
package gentest

import (
	"context"
	"errors"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// Test1.Insert1
			stmt, exists := ctx.Statements["Test1.Insert1"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Test1.Insert1")
				}
			} else {
				sqlStr := "insert into auth_roles(name, created_at, updated_at)\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
				stmt, err := gobatis.NewMapppedStatement(ctx, "Test1.Insert1",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Test1.Insert1"] = stmt
			}
		}
		return nil
	})
}

func NewTest1(ref gobatis.SqlSession) *Test1Impl {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &Test1Impl{session: ref}
}

type Test1Impl struct {
	session gobatis.SqlSession
}

func (impl *Test1Impl) WithDB(db gobatis.DBRunner) Test1 {
	return &Test1Impl{session: impl.session.WithDB(db)}
}

func (impl *Test1Impl) Insert1(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "Test1.Insert1",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// Test2.Insert2
			stmt, exists := ctx.Statements["Test2.Insert2"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Test2.Insert2")
				}
			} else {
				sqlStr := "insert into auth_roles(name, created_at, updated_at)\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
				stmt, err := gobatis.NewMapppedStatement(ctx, "Test2.Insert2",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Test2.Insert2"] = stmt
			}
		}
		return nil
	})
}

func NewTest2(ref gobatis.SqlSession) *Test2Impl {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &Test2Impl{session: ref}
}

type Test2Impl struct {
	session gobatis.SqlSession
}

func (impl *Test2Impl) WithDB(db gobatis.DBRunner) Test2 {
	return &Test2Impl{session: impl.session.WithDB(db)}
}

func (impl *Test2Impl) Insert2(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "Test2.Insert2",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// TestEmbedded.Insert3
			stmt, exists := ctx.Statements["TestEmbedded.Insert3"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("TestEmbedded.Insert3")
				}
			} else {
				sqlStr := "insert into auth_roles(name, created_at, updated_at)\r\n values (#{name}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)"
				stmt, err := gobatis.NewMapppedStatement(ctx, "TestEmbedded.Insert3",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["TestEmbedded.Insert3"] = stmt
			}
		}
		return nil
	})
}

func NewTestEmbedded(ref gobatis.SqlSession, test1 Test1, test2 Test2) *TestEmbeddedImpl {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &TestEmbeddedImpl{Test1: test1,
		Test2:   test2,
		session: ref}
}

type TestEmbeddedImpl struct {
	Test1
	Test2
	session gobatis.SqlSession
}

func (impl *TestEmbeddedImpl) WithDB(db gobatis.DBRunner) TestEmbedded {
	return &TestEmbeddedImpl{session: impl.session.WithDB(db)}
}

func (impl *TestEmbeddedImpl) Insert3() (int64, error) {
	return impl.session.Insert(context.Background(), "TestEmbedded.Insert3", nil, nil)
}
