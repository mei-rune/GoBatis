// Please don't edit this file!
package gentest

import (
	"context"
	"database/sql"
	"errors"
	"io"
	"reflect"

	gobatis "github.com/runner-mei/GoBatis"
)

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// Users.Insert
			stmt, exists := ctx.Statements["Users.Insert"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Insert")
				}
			} else {
				sqlStr, err := gobatis.GenerateInsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"u",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Insert error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Insert",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Insert"] = stmt
			}
		}
		{ //// Users.Insert1
			stmt, exists := ctx.Statements["Users.Insert1"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Insert1")
				}
			} else {
				sqlStr, err := gobatis.GenerateInsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"u",
					},
					[]reflect.Type{
						nil,
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Insert1 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Insert1",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Insert1"] = stmt
			}
		}
		{ //// Users.Update
			stmt, exists := ctx.Statements["Users.Update"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Update")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpdateSQL(ctx.Dialect, ctx.Mapper,
					"u.", reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Update error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Update",
					gobatis.StatementTypeUpdate,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Update"] = stmt
			}
		}
		{ //// Users.Upsert
			stmt, exists := ctx.Statements["Users.Upsert"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Upsert")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]string{
						"u",
					},
					[]reflect.Type{
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Upsert error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Upsert",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Upsert"] = stmt
			}
		}
		{ //// Users.UpsertByUsername
			stmt, exists := ctx.Statements["Users.UpsertByUsername"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.UpsertByUsername")
				}
			} else {

				sqlStr, err := gobatis.GenerateUpsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"username",
					},
					[]string{
						"username",
						"user",
					},
					[]reflect.Type{
						reflect.TypeOf(new(string)).Elem(),
						reflect.TypeOf((*User)(nil)),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.UpsertByUsername error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.UpsertByUsername",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.UpsertByUsername"] = stmt
			}
		}
		{ //// Users.DeleteAll
			stmt, exists := ctx.Statements["Users.DeleteAll"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.DeleteAll")
				}
			} else {
				sqlStr, err := gobatis.GenerateDeleteSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.DeleteAll error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.DeleteAll",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.DeleteAll"] = stmt
			}
		}
		{ //// Users.Delete
			stmt, exists := ctx.Statements["Users.Delete"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Delete")
				}
			} else {
				sqlStr, err := gobatis.GenerateDeleteSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Delete error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Delete",
					gobatis.StatementTypeDelete,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Delete"] = stmt
			}
		}
		{ //// Users.Get
			stmt, exists := ctx.Statements["Users.Get"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Get")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Get error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Get",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Get"] = stmt
			}
		}
		{ //// Users.GetWithCallback
			stmt, exists := ctx.Statements["Users.GetWithCallback"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.GetWithCallback")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.GetWithCallback error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.GetWithCallback",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.GetWithCallback"] = stmt
			}
		}
		{ //// Users.Count
			stmt, exists := ctx.Statements["Users.Count"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Count")
				}
			} else {
				sqlStr, err := gobatis.GenerateCountSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Count error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Count",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Count"] = stmt
			}
		}
		{ //// Users.GetName
			stmt, exists := ctx.Statements["Users.GetName"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.GetName")
				}
			} else {
				return errors.New("sql 'Users.GetName' error : statement not found - Generate SQL fail: sql is undefined")
			}
		}
		{ //// Users.Roles
			stmt, exists := ctx.Statements["Users.Roles"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Roles")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&Role{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Roles error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Roles",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Roles"] = stmt
			}
		}
		{ //// Users.UpdateName
			stmt, exists := ctx.Statements["Users.UpdateName"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.UpdateName")
				}
			} else {
				sqlStr, err := gobatis.GenerateUpdateSQL2(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}), reflect.TypeOf(new(int64)), "id", []string{
						"username",
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.UpdateName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.UpdateName",
					gobatis.StatementTypeUpdate,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.UpdateName"] = stmt
			}
		}
		{ //// Users.InsertName
			stmt, exists := ctx.Statements["Users.InsertName"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.InsertName")
				}
			} else {
				sqlStr, err := gobatis.GenerateInsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"name",
					},
					[]reflect.Type{
						reflect.TypeOf(new(string)).Elem(),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.InsertName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.InsertName",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.InsertName"] = stmt
			}
		}
		{ //// Users.Find1
			stmt, exists := ctx.Statements["Users.Find1"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Find1")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{
						{Expression: "id = 1"},
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find1 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find1",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find1"] = stmt
			}
		}
		{ //// Users.Find2
			stmt, exists := ctx.Statements["Users.Find2"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Find2")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{
						{Expression: "id = 1"},
						{Expression: "name = 'a'"},
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find2 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find2",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find2"] = stmt
			}
		}
		{ //// Users.Find3
			stmt, exists := ctx.Statements["Users.Find3"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Find3")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
					},
					[]gobatis.Filter{
						{Expression: "id > #{id}"},
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find3 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find3",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find3"] = stmt
			}
		}
		{ //// Users.Find4
			stmt, exists := ctx.Statements["Users.Find4"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Find4")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"id",
						"name",
					},
					[]reflect.Type{
						reflect.TypeOf(new(int64)).Elem(),
						reflect.TypeOf(new(string)).Elem(),
					},
					[]gobatis.Filter{
						{Expression: "id > #{id}"},
					})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find4 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find4",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find4"] = stmt
			}
		}
		{ //// Users.Find5
			stmt, exists := ctx.Statements["Users.Find5"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("Users.Find5")
				}
			} else {
				sqlStr, err := gobatis.GenerateSelectSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{},
					[]reflect.Type{},
					[]gobatis.Filter{})
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate Users.Find5 error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "Users.Find5",
					gobatis.StatementTypeSelect,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["Users.Find5"] = stmt
			}
		}
		return nil
	})
}

func NewUsers(ref gobatis.SqlSession) *UsersImpl {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &UsersImpl{session: ref}
}

type UsersImpl struct {
	session gobatis.SqlSession
}

func (impl *UsersImpl) WithDB(db gobatis.DBRunner) Users {
	return &UsersImpl{session: impl.session.WithDB(db)}
}

func (impl *UsersImpl) Insert(u *User) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.Insert",
		[]string{
			"u",
		},
		[]interface{}{
			u,
		})
}

func (impl *UsersImpl) Insert1(u interface{}) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.Insert1",
		[]string{
			"u",
		},
		[]interface{}{
			u,
		})
}

func (impl *UsersImpl) Update(id int64, u *User) (int64, error) {
	return impl.session.Update(context.Background(), "Users.Update",
		[]string{
			"id",
			"u",
		},
		[]interface{}{
			id,
			u,
		})
}

func (impl *UsersImpl) Upsert(u *User) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.Upsert",
		[]string{
			"u",
		},
		[]interface{}{
			u,
		})
}

func (impl *UsersImpl) UpsertByUsername(username string, user *User) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.UpsertByUsername",
		[]string{
			"username",
			"user",
		},
		[]interface{}{
			username,
			user,
		})
}

func (impl *UsersImpl) DeleteAll() (int64, error) {
	return impl.session.Delete(context.Background(), "Users.DeleteAll", nil, nil)
}

func (impl *UsersImpl) Delete(id int64) (int64, error) {
	return impl.session.Delete(context.Background(), "Users.Delete",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
}

func (impl *UsersImpl) Get(id int64) (*User, error) {
	var instance = &User{}

	err := impl.session.SelectOne(context.Background(), "Users.Get",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		}).Scan(instance)
	if err != nil {
		return nil, err
	}

	return instance, nil
}

func (impl *UsersImpl) GetWithCallback(id int64) func(*User) error {
	result := impl.session.SelectOne(context.Background(), "Users.GetWithCallback",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	return func(value *User) error {
		return result.Scan(value)
	}
}

func (impl *UsersImpl) Count() (int64, error) {
	var instance int64
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "Users.Count", nil, nil).Scan(&nullable)
	if err != nil {
		return 0, err
	}
	if !nullable.Valid {
		return 0, sql.ErrNoRows
	}

	return instance, nil
}

func (impl *UsersImpl) GetName(id int64) (string, error) {
	var instance string
	var nullable gobatis.Nullable
	nullable.Value = &instance

	err := impl.session.SelectOne(context.Background(), "Users.GetName",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		}).Scan(&nullable)
	if err != nil {
		return "", err
	}
	if !nullable.Valid {
		return "", sql.ErrNoRows
	}

	return instance, nil
}

func (impl *UsersImpl) Roles(id int64) ([]Role, error) {
	var instances []Role
	results := impl.session.Select(context.Background(), "Users.Roles",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) UpdateName(id int64, username string) (int64, error) {
	return impl.session.Update(context.Background(), "Users.UpdateName",
		[]string{
			"id",
			"username",
		},
		[]interface{}{
			id,
			username,
		})
}

func (impl *UsersImpl) InsertName(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "Users.InsertName",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}

func (impl *UsersImpl) Find1() ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find1", nil, nil)
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find2() ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find2", nil, nil)
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find3(id int64) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find3",
		[]string{
			"id",
		},
		[]interface{}{
			id,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find4(id int64, name string) ([]User, error) {
	var instances []User
	results := impl.session.Select(context.Background(), "Users.Find4",
		[]string{
			"id",
			"name",
		},
		[]interface{}{
			id,
			name,
		})
	err := results.ScanSlice(&instances)
	if err != nil {
		return nil, err
	}
	return instances, nil
}

func (impl *UsersImpl) Find5() (func(*User) (bool, error), io.Closer) {
	results := impl.session.Select(context.Background(), "Users.Find5", nil, nil)
	return func(value *User) (bool, error) {
		if !results.Next() {
			if results.Err() == sql.ErrNoRows {
				return false, nil
			}
			return false, results.Err()
		}
		return true, results.Scan(value)
	}, results
}

func init() {
	gobatis.Init(func(ctx *gobatis.InitContext) error {
		{ //// UserExDao.InsertName
			stmt, exists := ctx.Statements["UserExDao.InsertName"]
			if exists {
				if stmt.IsGenerated() {
					return gobatis.ErrStatementAlreadyExists("UserExDao.InsertName")
				}
			} else {
				sqlStr, err := gobatis.GenerateInsertSQL(ctx.Dialect, ctx.Mapper,
					reflect.TypeOf(&User{}),
					[]string{
						"name",
					},
					[]reflect.Type{
						reflect.TypeOf(new(string)).Elem(),
					}, false)
				if err != nil {
					return gobatis.ErrForGenerateStmt(err, "generate UserExDao.InsertName error")
				}
				stmt, err := gobatis.NewMapppedStatement(ctx, "UserExDao.InsertName",
					gobatis.StatementTypeInsert,
					gobatis.ResultStruct,
					sqlStr)
				if err != nil {
					return err
				}
				ctx.Statements["UserExDao.InsertName"] = stmt
			}
		}
		return nil
	})
}

func NewUserExDao(ref gobatis.SqlSession) *UserExDaoImpl {
	if ref == nil {
		panic(errors.New("param 'ref' is nil"))
	}
	if reference, ok := ref.(*gobatis.Reference); ok {
		if reference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	} else if valueReference, ok := ref.(gobatis.Reference); ok {
		if valueReference.SqlSession == nil {
			panic(errors.New("param 'ref.SqlSession' is nil"))
		}
	}
	return &UserExDaoImpl{session: ref}
}

type UserExDaoImpl struct {
	session gobatis.SqlSession
}

func (impl *UserExDaoImpl) WithDB(db gobatis.DBRunner) UserExDao {
	return &UserExDaoImpl{session: impl.session.WithDB(db)}
}

func (impl *UserExDaoImpl) InsertName(name string) (int64, error) {
	return impl.session.Insert(context.Background(), "UserExDao.InsertName",
		[]string{
			"name",
		},
		[]interface{}{
			name,
		})
}
